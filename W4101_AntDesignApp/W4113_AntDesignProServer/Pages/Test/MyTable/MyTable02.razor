@using System.Text.Json
@using System.ComponentModel.DataAnnotations

@using AntDesign.TableModels

@using Masuit.Tools
@using Masuit.Tools.Database
@using Masuit.Tools.Excel
@using Masuit.Tools.Files

@using W4113_AntDesignProServer.Models.Test
@using W4113_AntDesignProServer.Utils



@namespace W4113_AntDesignProServer.Pages.Test

@page "/test/mytable02"



<Table @ref="_table" 
TItem="TableModel" 
PageSize="5" Total="_total"
DataSource="_dataSource" OnChange="OnChange">


    <TitleTemplate>
        <Flex Justify="end" Gap="10">
            <Button Type="primary" @onclick="()=> StartEdit(default)">New</Button>

            <Button Icon="@IconType.Outline.FileExcel" Type="primary" @onclick="ExportExcel" >导出</Button>

            <Button Icon="@IconType.Outline.FileExcel" Type="primary" @onclick="OpenImportModal">导入</Button>
        </Flex>
    </TitleTemplate>

    <ColumnDefinitions Context="row">

        <PropertyColumn Property="c=>c.ReportName" Sortable>
        </PropertyColumn>
        <PropertyColumn Property="c=>c.ReportFileName" Sortable>
        </PropertyColumn>
        <PropertyColumn Property="c=>c.DefaultVisable" Sortable>
        </PropertyColumn>
        <PropertyColumn Property="c=>c.ReportTypeCode" Sortable>
        </PropertyColumn>
        <PropertyColumn Property="c=>c.ReportDataSourceCode" Sortable>
        </PropertyColumn>


        <ActionColumn Title="Action">
            <a @onclick="() => StartEdit(row)">Edit</a>
            <a @onclick="() => Delete(row)">Delete</a>
        </ActionColumn>

    </ColumnDefinitions>
</Table>


<hr/>
<p>
    测试 Table 组件.
    <br/>
    这里是手动填写列，不使用自动绑定。
</p>






<Modal Title="导入"
@ref="@_importModal"
@bind-Visible="@_isShowImportModal"
Footer="@null">

    <div>
        <Steps Current="@_currentStep" Class="site-navigation-steps">
            <Step Title="步骤一" Description="上传文件" />
            <Step Title="步骤二" Description="读取文件" />
            <Step Title="步骤三" Description="数据导入" />
            <Step Title="步骤四" Description="结果报告" />
        </Steps>
    </div>

    <div class="steps-content">

        @if (_currentStep == 0)
        {
            <div>
                <InputFile id="fileInput" OnChange="UploadFile" hidden accept=".xls,.xlsx" />

                <Upload Name="files">
                    <label class="ant-btn" for="fileInput">
                        <Icon Type="upload" />
                        上传Excel文件.
                    </label>
                </Upload>
            </div>
        }
        else if (_currentStep == 1)
        {
            <div>
                <label>选择要读取的表格:</label>
                <Select Style="width:240px;"
                    DefaultActiveFirstOption
                    TItem="ExcelSheetInfo" TItemValue="string"
                    LabelName="@nameof(ExcelSheetInfo.Name)"
                    ValueName="@nameof(ExcelSheetInfo.Name)"
                    DataSource="@_excelSheetInfos"
                    @bind-Value="_selectedSheetName">
                </Select>


                <Button Type="Primary" OnClick="GotoImport">导入</Button>

            </div>

        }
        else if (_currentStep == 2)
        {

            <div>
                <AntDesign.Progress Percent="@_importProgress" ShowInfo="false" />
                <p>
                    <span>@_importCurrent</span>
                    /
                    <span>@_importRowCount</span>
                </p>

                <Button Type="Primary" OnClick="StartImport" Disabled="@_StartImportFlag">开始处理</Button>
            </div>

        }
        else if (_currentStep == 3)
        {
            <div>
                <h3>完成！</h3>

            </div>
        }

    </div>

</Modal>



<style>

    .steps-content {
    margin-top: 16px;
    border: 1px dashed #e9e9e9;
    border-radius: 6px;
    background-color: #fafafa;
    min-height: 200px;
    text-align: center;
    padding-top: 80px;
    }

</style>


@inject ModalService ModalService
@inject ConfirmService ComfirmService
@inject IJSRuntime _JS
@inject IWebHostEnvironment _Environment
@inject IMessageService message
@code {

    RenderFragment FormTemplate()
    {
        return
    @<Form Model="@_CurrentData"
               LabelColSpan="8"
               WrapperColSpan="16"
               OnFinish="OnFinish"
               OnFinishFailed="OnFinishFailed"
               @ref="@_form">

        <FormItem Label="报表名">
            <Input @bind-Value="@context.ReportName" />
        </FormItem>
        <FormItem Label="报表文件名">
            <Input @bind-Value="@context.ReportFileName" />
        </FormItem>
        <FormItem Label="默认可见">
            <Switch @bind-Checked="@context.DefaultVisable" />
        </FormItem>
        <FormItem Label="报表类型">
            <Input @bind-Value="@context.ReportTypeCode" />
        </FormItem>
        <FormItem Label="报表数据源">
            <Input @bind-Value="@context.ReportDataSourceCode" />
        </FormItem>

    </Form>
    ;
    }



    /// <summary>
    /// Table 组件.
    /// </summary>
    private ITable _table;


    List<TableModel> mockDb = [];

    /// <summary>
    /// 数据源.
    /// </summary>
    private List<TableModel> _dataSource;

    /// <summary>
    /// 总行数.
    /// </summary>
    private int _total;





    /// <summary>
    /// 新增/编辑的表单.
    /// </summary>
    private Form<TableModel> _form;

    /// <summary>
    /// 新增/编辑的 “当前数据”
    /// </summary>
    TableModel _CurrentData;

    /// <summary>
    /// 是新增，还是编辑.
    /// </summary>
    bool _IsInsert;



    protected override void OnInitialized()
    {
        // 初始化数据源.
        mockDb = TableModel.GetTestDataList();

        _dataSource = mockDb;
    }



    void OnChange(QueryModel<TableModel> query)
    {

        _total = mockDb.AsQueryable().ExecuteTableQuery(query).Count();
        _dataSource = mockDb.AsQueryable().ExecuteTableQuery(query).CurrentPagedRecords(query).ToList();

    }



    void StartEdit(TableModel row)
    {
        if(row == null)
        {
            _IsInsert = true;
            _CurrentData = new TableModel();
        } 
        else
        {
            _IsInsert = false;
            _CurrentData = new TableModel()
            {
                Id = row.Id,
                ReportTypeCode = row.ReportTypeCode,
                ReportDataSourceCode = row.ReportDataSourceCode,
                ReportName = row.ReportName,
                ReportFileName = row.ReportFileName,
                DefaultVisable = row.DefaultVisable,
            };
        }




        ModalRef<bool> modalRef = default;
        IForm form = default;
        modalRef = ModalService.CreateModal<bool>(new()
        {
                Title = _CurrentData.Id > 0 ? "Edit" : "New",
                Content = FormTemplate(),
                OnOk = async e =>
                {
                    modalRef?.SetConfirmLoading(true);
                    await Task.Delay(1000);
                    if (!_form.Validate())
                    {
                        modalRef?.SetConfirmLoading(false);
                        return;
                    }

                    _form.Submit();

                    await modalRef.CloseAsync();

                    _form.Reset();
                },
                OnCancel = async e =>
                {
                    if (!_form.IsModified
                        || await ModalService.ConfirmAsync(new() { Content = "确定要放弃所做的修改操作么?" }))
                    {
                        await modalRef.CloseAsync();
                        _form.Reset();
                    }
                },
        });
    }


    async Task Delete(TableModel row)
    {
        if (!await Comfirm($"Are you sure delete [{row.ReportName}]?"))
            return;

        mockDb = mockDb.Where(p=>p.Id != row.Id).ToList();

        _table.ReloadData();
    }


    private async Task<bool> Comfirm(string message)
    {
        return await ComfirmService.Show(message, "Confirm", ConfirmButtons.YesNo, ConfirmIcon.Warning) == ConfirmResult.Yes;
    }






    /// <summary>
    /// 表单提交时，如果输入的数据无误，则会调用此方法。
    /// </summary>
    /// <param name="editContext"></param>
    /// <returns></returns>
    private async Task OnFinish(EditContext editContext)
    {
        if (this._IsInsert)
        {
            // 插入的处理逻辑.

            var newData = new TableModel()
                {
                    Id = mockDb.Max(x => x.Id) + 1,
                    ReportTypeCode = _CurrentData.ReportTypeCode,
                    ReportDataSourceCode = _CurrentData.ReportDataSourceCode,
                    ReportName = _CurrentData.ReportName,
                    ReportFileName = _CurrentData.ReportFileName,
                    DefaultVisable = _CurrentData.DefaultVisable,
                };

            mockDb.Add(newData);

            _table.ReloadData();

        }
        else
        {
            // 更新的处理逻辑.
            var index = mockDb.FindIndex(x => x.Id == _CurrentData.Id);

            mockDb[index].ReportTypeCode = _CurrentData.ReportTypeCode;
            mockDb[index].ReportDataSourceCode = _CurrentData.ReportDataSourceCode;
            mockDb[index].ReportName = _CurrentData.ReportName;
            mockDb[index].ReportFileName = _CurrentData.ReportFileName;
            mockDb[index].DefaultVisable = _CurrentData.DefaultVisable;

            _table.ReloadData();
        }
    }


    /// <summary>
    /// 表单提交失败时，如果输入的数据有错误，会调用此方法。
    /// </summary>
    /// <param name="editContext"></param>
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(_CurrentData)}");
    }




    #region 导出.

    async Task ExportExcel()
    {

        string wwwPath = _Environment.WebRootPath;
        // 存储文件的物理路径.
        string outputFilePath = $"{wwwPath}/output/{DateTime.Today:yyyyMMdd}";
        if (!Directory.Exists(outputFilePath))
        {
            // 目录不存在，则创建.
            Directory.CreateDirectory(outputFilePath);
        }

        string fileName = $"测试数据_{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        string outputFileName = $"{outputFilePath}/{fileName}";


        using (var stream = mockDb.ToDataTable().ToExcel())
        {
            stream.SaveFile(outputFileName);
        }


        var fileStream = File.OpenRead(outputFileName);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await _JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    #endregion





    #region 导入.


    Modal _importModal;


    bool _isShowImportModal;


    void OpenImportModal()
    {
        _isShowImportModal = true;
    }



    /// <summary>
    /// 当前的步骤.
    /// </summary>
    int _currentStep = 0;


    /// <summary>
    /// 保存的文件名.
    /// </summary>
    string? _saveFileName;


    /// <summary>
    /// 上传文件的处理.
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task UploadFile(InputFileChangeEventArgs e)
    {

        string wwwPath = _Environment.WebRootPath;
        // 存储文件的物理路径.
        string saveFilePath = $"{wwwPath}/Upload";

        // 目录不存在，则创建.
        if (!System.IO.Directory.Exists(saveFilePath))
        {
            System.IO.Directory.CreateDirectory(saveFilePath);
        }

        var file = e.File;
        {
            _saveFileName = $"{wwwPath}/Upload/{file.Name}";
            // 文件已存在，则删除.
            if (System.IO.File.Exists(_saveFileName))
            {
                System.IO.File.Delete(_saveFileName);
            }

            using (var stream = System.IO.File.Create(_saveFileName))
            {
                await file.OpenReadStream().CopyToAsync(stream);
            }

            // 上传完成，进入下一步.
            _currentStep++;

            // 读取表格信息.
            ReadExcle();


            this.StateHasChanged();
        }
    }



    /// <summary>
    /// 读取的 Excel 基础信息.
    /// </summary>
    List<ExcelSheetInfo> _excelSheetInfos = new();


    private void ReadExcle()
    {
        if (_saveFileName != null)
        {
            _excelSheetInfos = ExcelReader.GetSheetInfo(_saveFileName);
        }

    }


    /// <summary>
    /// 选择的 Sheet 名.
    /// </summary>
    string? _selectedSheetName;



    /// <summary>
    /// 进入 导入步骤.
    /// </summary>
    private void GotoImport()
    {
        if (string.IsNullOrEmpty(_selectedSheetName))
        {
            message.Error("请选择要读取的表格.");
            return;
        }

        // 选择的表格.
        var selectSheet = _excelSheetInfos.First(x => x.Name == _selectedSheetName);

        // 总行数.
        _importRowCount = selectSheet.RowCount;

        _currentStep++;
    }





    /// <summary>
    /// 导入的总行数.
    /// </summary>
    int _importRowCount = 0;

    /// <summary>
    /// 当前导入的行数.
    /// </summary>
    int _importCurrent = 0;


    /// <summary>
    /// 导入的进度.
    /// </summary>
    double _importProgress = 0;



    /// <summary>
    /// 开始处理标志.
    /// </summary>
    bool _StartImportFlag = false;


    /// <summary>
    /// 开始导入处理.
    /// </summary>
    /// <returns></returns>
    private async Task StartImport()
    {
        if (_saveFileName == null)
        {
            await message.Error("请先上传文件.");
            return;
        }
        if (string.IsNullOrEmpty(_selectedSheetName))
        {
            await message.Error("请选择要读取的表格.");
            return;
        }

        _StartImportFlag = true;

        foreach (var data in ExcelReader.GetSheetData(_saveFileName, _selectedSheetName))
        {

            // 模拟导入数据.
            await Task.Delay(100);


            // Excel 数据中的一行， 转换为实体。
            var newData = new TableModel();
            newData.Id = Convert.ToInt32(data["报表ID"]);
            newData.ReportTypeCode = data["报表类型"] as string;
            newData.ReportDataSourceCode = data["报表数据源"] as string;
            newData.ReportName = data["报表名"] as string;
            newData.ReportFileName = data["报表文件名"] as string;
            newData.DefaultVisable = Convert.ToBoolean(data["默认可见标志"]);
            newData.Remark = data["备注"] as string;
            newData.IsProcessSuccess = Convert.ToBoolean(data["是否处理成功"]);


            if (mockDb.Any(p=>p.Id == newData.Id)){
                // 存在， 修改 ID 为最大的 ID+1.
                newData.Id = mockDb.Max(p=>p.Id)+1;
            }

            mockDb.Add(newData);


            // 当前导入的行数.
            _importCurrent++;

            // 导入进度.
            _importProgress = (double)_importCurrent / _importRowCount * 100;


            // 注意：
            // 这里是演示的操作。
            // 实际操作中，不需要 逐行调用一次 StateHasChanged()。
            // 例如导入1000行数据，每行更新速度是挺快的。
            // 但是每行都调用一次StateHasChanged()，总时间就长了。
            this.StateHasChanged();
        }

        // 数据导入完成后，进入下一步。
        _currentStep++;

        
        // 导入数据后，刷新表格的分页.
        _table.ReloadData();
    }

    #endregion



}
