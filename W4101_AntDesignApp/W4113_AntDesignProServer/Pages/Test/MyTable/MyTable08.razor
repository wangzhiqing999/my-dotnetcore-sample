@using System.Text.Json
@using AntDesign.TableModels
@using System.ComponentModel.DataAnnotations
@using W4113_AntDesignProServer.Models.Test

@namespace W4113_AntDesignProServer.Pages.Test

@page "/test/mytable08"



<Table @ref="_table" 
    TItem="TableModel" 
    PageSize="5" Total="_total"
       DataSource="_dataSource" OnChange="OnChange" Resizable>


    <TitleTemplate>
        <Flex Justify="end" Gap="10">
            <Button Type="primary" @onclick="()=> StartEdit(default)">New</Button>
        </Flex>
    </TitleTemplate>

    <ColumnDefinitions Context="row">

        <PropertyColumn Property="c=>c.ReportName" Sortable Width="150">
        </PropertyColumn>
        <PropertyColumn Property="c=>c.ReportFileName" Sortable Width="150">
        </PropertyColumn>
        
        <PropertyColumn Title="默认可见" Property="c=>c.DefaultVisable" Sortable Width="120">
            <Tag Color="@(row.DefaultVisable ? "green" : "volcano")">@(row.DefaultVisable ? "有效" : "无效")</Tag>
        </PropertyColumn>
        
        <PropertyColumn Property="c=>c.ReportTypeCode" Sortable Width="120">
        </PropertyColumn>
        <PropertyColumn Property="c=>c.ReportDataSourceCode" Sortable Width="120">
        </PropertyColumn>

        <PropertyColumn Property="c=>c.Remark">
        </PropertyColumn>

        <ActionColumn Title="Action">
            <a @onclick="() => StartEdit(row)">Edit</a>
            <a @onclick="() => Delete(row)">Delete</a>
        </ActionColumn>

    </ColumnDefinitions>
</Table>


<hr/>
<p>
    测试 Table 组件.
    <br/>
    这里是设置表格的 Resizable，可以让用户自己调整表格列宽
</p>




@inject ModalService ModalService;
@inject ConfirmService ComfirmService;
@code {

    RenderFragment FormTemplate()
    {
        return
    @<Form Model="@_CurrentData"
               LabelColSpan="8"
               WrapperColSpan="16"
               OnFinish="OnFinish"
               OnFinishFailed="OnFinishFailed"
               @ref="@_form">

        <FormItem Label="报表名">
            <Input @bind-Value="@context.ReportName" />
        </FormItem>
        <FormItem Label="报表文件名">
            <Input @bind-Value="@context.ReportFileName" />
        </FormItem>
        <FormItem Label="默认可见">
            <Switch @bind-Checked="@context.DefaultVisable" />
        </FormItem>
        <FormItem Label="报表类型">
            <Input @bind-Value="@context.ReportTypeCode" />
        </FormItem>
        <FormItem Label="报表数据源">
            <Input @bind-Value="@context.ReportDataSourceCode" />
        </FormItem>
        <FormItem Label="备注">
            <TextArea @bind-Value="@context.Remark" />
        </FormItem>
    </Form>
    ;
    }





    /// <summary>
    /// Table 组件.
    /// </summary>
    private ITable _table;


    List<TableModel> mockDb = [];

    /// <summary>
    /// 数据源.
    /// </summary>
    private List<TableModel> _dataSource;

    /// <summary>
    /// 总行数.
    /// </summary>
    private int _total;





    /// <summary>
    /// 新增/编辑的表单.
    /// </summary>
    private Form<TableModel> _form;

    /// <summary>
    /// 新增/编辑的 “当前数据”
    /// </summary>
    TableModel _CurrentData;

    /// <summary>
    /// 是新增，还是编辑.
    /// </summary>
    bool _IsInsert;



    protected override void OnInitialized()
    {
        // 初始化数据源.
        mockDb = TableModel.GetTestDataList(100);

        _dataSource = mockDb;
    }



    void OnChange(QueryModel<TableModel> query)
    {

        _total = mockDb.AsQueryable().ExecuteTableQuery(query).Count();
        _dataSource = mockDb.AsQueryable().ExecuteTableQuery(query).CurrentPagedRecords(query).ToList();

    }



    void StartEdit(TableModel row)
    {
        if(row == null)
        {
            _IsInsert = true;
            _CurrentData = new TableModel();
        } 
        else
        {
            _IsInsert = false;
            _CurrentData = new TableModel()
            {
                Id = row.Id,
                ReportTypeCode = row.ReportTypeCode,
                ReportDataSourceCode = row.ReportDataSourceCode,
                ReportName = row.ReportName,
                ReportFileName = row.ReportFileName,
                DefaultVisable = row.DefaultVisable,
                Remark = row.Remark
            };
        }
        
        


        ModalRef<bool> modalRef = default;
        IForm form = default;
        modalRef = ModalService.CreateModal<bool>(new()
        {
                Title = _CurrentData.Id > 0 ? "Edit" : "New",
                Content = FormTemplate(),
                OnOk = async e =>
                {
                    modalRef?.SetConfirmLoading(true);
                    await Task.Delay(1000);
                    if (!_form.Validate())
                    {
                        modalRef?.SetConfirmLoading(false);
                        return;
                    }

                    _form.Submit();

                    await modalRef.CloseAsync();

                    _form.Reset();
                },
                OnCancel = async e =>
                {
                    if (!_form.IsModified
                        || await ModalService.ConfirmAsync(new() { Content = "确定要放弃所做的修改操作么?" }))
                    {
                        await modalRef.CloseAsync();
                        _form.Reset();
                    }
                },
        });
    }


    async Task Delete(TableModel row)
    {
        if (!await Comfirm($"Are you sure delete [{row.ReportName}]?"))
            return;

        mockDb = mockDb.Where(p=>p.Id != row.Id).ToList();

        _table.ReloadData();
    }


    private async Task<bool> Comfirm(string message)
    {
        return await ComfirmService.Show(message, "Confirm", ConfirmButtons.YesNo, ConfirmIcon.Warning) == ConfirmResult.Yes;
    }






    /// <summary>
    /// 表单提交时，如果输入的数据无误，则会调用此方法。
    /// </summary>
    /// <param name="editContext"></param>
    /// <returns></returns>
    private async Task OnFinish(EditContext editContext)
    {
        if (this._IsInsert)
        {
            // 插入的处理逻辑.

            var newData = new TableModel()
                {
                    Id = mockDb.Max(x => x.Id) + 1,
                    ReportTypeCode = _CurrentData.ReportTypeCode,
                    ReportDataSourceCode = _CurrentData.ReportDataSourceCode,
                    ReportName = _CurrentData.ReportName,
                    ReportFileName = _CurrentData.ReportFileName,
                    DefaultVisable = _CurrentData.DefaultVisable,
                    Remark = _CurrentData.Remark
                };
            
            mockDb.Add(newData);

            _table.ReloadData();
            
        }
        else
        {
            // 更新的处理逻辑.
            var index = mockDb.FindIndex(x => x.Id == _CurrentData.Id);
            
            mockDb[index].ReportTypeCode = _CurrentData.ReportTypeCode;
            mockDb[index].ReportDataSourceCode = _CurrentData.ReportDataSourceCode;
            mockDb[index].ReportName = _CurrentData.ReportName;
            mockDb[index].ReportFileName = _CurrentData.ReportFileName;
            mockDb[index].DefaultVisable = _CurrentData.DefaultVisable;
            mockDb[index].Remark = _CurrentData.Remark;

            _table.ReloadData();
        }
    }


    /// <summary>
    /// 表单提交失败时，如果输入的数据有错误，会调用此方法。
    /// </summary>
    /// <param name="editContext"></param>
    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(_CurrentData)}");
    }




}
