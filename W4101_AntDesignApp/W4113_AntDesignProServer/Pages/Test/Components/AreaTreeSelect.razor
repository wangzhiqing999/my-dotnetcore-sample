@using System.Diagnostics.CodeAnalysis
@using W4113_AntDesignProServer.Models.Test

@namespace W4113_AntDesignProServer.Pages.Test

<TreeSelect
            Style="@Style"
            Placeholder="@Placeholder"
            AllowClear="@AllowClear"
            Mode="@(IsMultiple?"multiple":"default")"
			DataSource="_dataSource"
            @bind-Value="@Value"
            @bind-Values="@Values"

            TItem="W4113_AntDesignProServer.Models.Test.Area"
            TItemValue="string"
            LabelName="@nameof(W4113_AntDesignProServer.Models.Test.Area.AreaName)"
            ValueName="@nameof(W4113_AntDesignProServer.Models.Test.Area.AreaCode)"

            TreeCheckable="@TreeCheckable"
            TreeCheckStrictly="@TreeCheckStrictly"
            ShowCheckedStrategy="@ShowCheckedStrategy"
            CheckOnClickNode="@CheckOnClickNode"

			TreeDefaultExpandAll

			ChildrenExpression="node=>node.DataItem.Children"
			TitleExpression="node=>node.DataItem.AreaName"
			TitleTemplate="node=>node.DataItem.AreaName.ToRenderFragment()"
			KeyExpression="node=>node.DataItem.AreaCode"
			IsLeafExpression="node=>node.DataItem.Children==null"
            OnSelectedItemChanged="OnSelectedItemChangedHandler"
            OnSelectedItemsChanged="OnSelectedItemsChangedHandler">
</TreeSelect>


@code {



    // 组件的代码，分三个部分.
    // 1. 提供给外部设置的参数.
    // 2. 数据源，实际业务中，也就是查询数据字典表，或者读取配置文件等操作.
    // 3. 实现外部的 @bind-Value 与 @bind-Values 的支持.


    // 外部使用组件的代码，就主要是设置以下 基本的参数.
    // 1.样式
    // 2.是否多选.
    // 3.绑定的数据. 单选使用 @bind-Value， 多选使用 @bind-Values.
    // 4.其它的参数，比如：是否允许清除，是否允许搜索等.


    #region 提供给外部设置的参数.

    /// <summary>
    /// 组件的样式.
    /// </summary>
    [Parameter]
    public string Style { get; set; } = "width:100%;";


    /// <summary>
    /// 占位符.
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = "";


    /// <summary>
    /// 是否允许做“清除”的操作.
    /// </summary>
    [Parameter]
    public bool AllowClear { get; set; } = false;


    /// <summary>
    /// 是否允许搜索.
    /// </summary>
    [Parameter]
    public bool EnableSearch { get; set; } = false;


    /// <summary>
    /// 是否多选.
    /// </summary>
    [Parameter]
    public bool IsMultiple { get; set; } = false;



    /// <summary>
    /// 是否能够选择树节点，这将选择该节点下的所有叶子。
    /// </summary>
    [Parameter]
    public bool TreeCheckable { get; set; } = false;

    /// <summary>
    /// 精确检查 treeNode；父树节点和子树节点没有关联
    /// </summary>
    [Parameter]
    public bool TreeCheckStrictly { get; set; } = false;

    /// <summary>
    /// 指定当 TreeCheckable 为 true 且 TreeCheckStrictly 为 false 时如何显示选中的值
    /// </summary>
    [Parameter]
    public TreeCheckedStrategy ShowCheckedStrategy { get; set; } = TreeCheckedStrategy.ShowAll;

    /// <summary>
    /// 是否在用户单击树节点时选中复选框。
    /// </summary>
    [Parameter]
    public bool CheckOnClickNode { get; set; } = false;

    #endregion




    #region 数据源的部分.

    List<W4113_AntDesignProServer.Models.Test.Area> _dataSource = [];

    protected override void OnInitialized()
    {
        _dataSource = W4113_AntDesignProServer.Models.Test.Area.GetTestAreasTreeList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }


    /// <summary>
    /// 获取选择的节点.
    /// </summary>
    /// <returns></returns>
    private W4113_AntDesignProServer.Models.Test.Area GetSelectedItem()
    {
        var rootItem = _dataSource.FirstOrDefault(x => x.AreaCode == Value);
        if (rootItem != null)
        {
            return rootItem;
        }
        foreach(var item in _dataSource)
        {
            var selectItem = GetSelectedItem(item);
            if (selectItem != null)
            {
                return selectItem;
            }
        }

        return null;
    }

    private W4113_AntDesignProServer.Models.Test.Area GetSelectedItem(W4113_AntDesignProServer.Models.Test.Area pItem)
    {
        var item = pItem.Children?.FirstOrDefault(x => x.AreaCode == Value);
        if (item != null)
        {
            return item;
        }

        if (pItem.Children != null && pItem.Children.Count > 0)
        {
            foreach (var subItem in pItem.Children)
            {
                var item2 = GetSelectedItem(subItem);
                if (item2 != null)
                {
                    return item2;
                }
            }
        }

        return null;
    }


    #endregion




    #region 数据选择的部分.


    #region 单选.

    /// <summary>
    /// 选择的数据.
    /// </summary>
    [Parameter]
    public string Value { get; set; }


    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }



    private async Task OnSelectedItemChangedHandler(W4113_AntDesignProServer.Models.Test.Area value)
    {
        if (ValueChanged.HasDelegate)
        {
            if (value != null)
            {
                await ValueChanged.InvokeAsync(value.AreaCode);
            }
            else
            {
                await ValueChanged.InvokeAsync(null);
            }
        }
    }


    #endregion



    #region 多选.

    /// <summary>
    /// 选择的数据.
    /// </summary>
    [Parameter]
    public IEnumerable<string> Values { get; set; } = new List<string>();


    [Parameter]
    public EventCallback<IEnumerable<string>> ValuesChanged { get; set; }


    private async Task OnSelectedItemsChangedHandler(IEnumerable<W4113_AntDesignProServer.Models.Test.Area> values)
    {
        if (ValuesChanged.HasDelegate)
        {
            if (values != null)
            {
                await ValuesChanged.InvokeAsync(values.Select(x => x.AreaCode));
            }
            else
            {
                await ValuesChanged.InvokeAsync(null);
            }
        }
    }

    #endregion

    #endregion



}
