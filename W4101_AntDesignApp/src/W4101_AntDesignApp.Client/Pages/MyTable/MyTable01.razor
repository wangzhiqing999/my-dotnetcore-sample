@using AntDesign.TableModels
@using System.ComponentModel.DataAnnotations
@using W4101_AntDesignApp.Models
@namespace W4101_AntDesignApp.Pages

@page "/mytable01"


<Table @ref="_table" 
    TItem="TableModel" 
    PageSize="5" Total="_total"
    DataSource="_dataSource" OnChange="OnChange">


    <TitleTemplate>
        <Flex Justify="end" Gap="10">
            <Button Type="primary" @onclick="()=> StartEdit(default)">New</Button>
        </Flex>
    </TitleTemplate>

    <ColumnDefinitions Context="row">

        <GenerateColumns Definitions="@((n,c) => { c.Filterable = true; c.Sortable = true; })" />

        <ActionColumn Title="Action">
            <a @onclick="() => StartEdit(row)">Edit</a>
            <a @onclick="() => Delete(row)">Delete</a>
        </ActionColumn>

    </ColumnDefinitions>
</Table>


<hr/>
<p>
    测试 Table 组件.
    <br/>
    用到了自动生成列和自动生成表单项。
</p>



@inject ModalService ModalService;
@inject ConfirmService ComfirmService;
@code {


    /// <summary>
    /// Table 组件.
    /// </summary>
    private ITable _table;


    List<TableModel> mockDb = [];

    /// <summary>
    /// 数据源.
    /// </summary>
    private List<TableModel> _dataSource;

    /// <summary>
    /// 总行数.
    /// </summary>
    private int _total;



    protected override void OnInitialized()
    {
        // 初始化数据源.
        mockDb = TableModel.GetTestDataList();

        _dataSource = mockDb;
    }



    void OnChange(QueryModel<TableModel> query)
    {
        
        _total = mockDb.AsQueryable().ExecuteTableQuery(query).Count();
        _dataSource = mockDb.AsQueryable().ExecuteTableQuery(query).CurrentPagedRecords(query).ToList();

    }



    void StartEdit(TableModel row)
    {
        var data = row == null ? new() : row;

        ModalRef<bool> modalRef = default;
        IForm form = default;
        modalRef = ModalService.CreateModal<bool>(new()
                {
                    Title = data.Id > 0 ? "Edit" : "New",
                    Content = @<Form @ref="form" Model="data" OnFinish="()=> modalRef.OkAsync(true)" LabelColSpan="6" WrapperColSpan="18">
        <GenerateFormItem NotGenerate="@(x=> x == "Id")" />
    </Form>
    ,
            OnOk = async (e) =>
            {
                if (!form.Validate())
                {
                    return;
                }

                // save db and refresh
                modalRef.SetConfirmLoading(true);

                if (data.Id > 0)
                {
                    var index = mockDb.FindIndex(x => x.Id == data.Id);
                    mockDb[index] = data;
                }
                else
                {
                    data.Id = mockDb.Max(x => x.Id) + 1;
                    mockDb.Add(data);
                }

                await Task.Delay(1000);

                await modalRef.CloseAsync();
                _table.ReloadData();
                StateHasChanged();
            },
            OnCancel = async (e) =>
            {
                if (form.IsModified && (!await Comfirm("The form have been updated, are you sure quit?")))
                {
                    return;
                }
                await modalRef.CloseAsync();
            }
        });
    }


    async Task Delete(TableModel row)
    {
        if (!await Comfirm($"Are you sure delete [{row.ReportName}]?"))
            return;

        mockDb = mockDb.Where(p=>p.Id != row.Id).ToList();

        _table.ReloadData();
    }


    private async Task<bool> Comfirm(string message)
    {
        return await ComfirmService.Show(message, "Confirm", ConfirmButtons.YesNo, ConfirmIcon.Warning) == ConfirmResult.Yes;
    }


}
