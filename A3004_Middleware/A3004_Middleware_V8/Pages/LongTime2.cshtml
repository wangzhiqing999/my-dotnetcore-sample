@page
@model A3004_Middleware_V8.Pages.LongTime2Model
@{
    ViewData["Title"] = "测试输出缓存的页面";
}

<h1>@ViewData["Title"]</h1>

<p>
    这个页面耗时略长.
    <br />
    处理时间：@Model.ProcessingTime

    <br />
    尝试刷新页面，看看缓存是否产生效果。
</p>


<p>
    https://learn.microsoft.com/zh-cn/aspnet/core/performance/caching/overview?view=aspnetcore-8.0#output-caching
</p>

<p>
    输出缓存中间件支持 HTTP 响应的缓存。 输出缓存与响应缓存的不同之处包括以下方面：
</p>

<ul>
    <li>
        <p>缓存行为可在服务器上配置。</p>
        <p>响应缓存行为由 HTTP 标头定义。 例如，使用 Chrome 或 Edge 访问网站时，浏览器会自动发送 <code>Cache-control: max-age=0</code> 标头。 此标头将有效地禁用响应缓存，因为服务器遵循客户端提供的说明。 即使服务器有新的缓存响应，也会为每个请求返回新的响应。 使用输出缓存时，客户端不会替代你在服务器上配置的缓存行为。</p>
    </li>
    <li>
        <p>缓存存储介质是可扩展的。</p>
        <p>默认情况下使用内存。 响应缓存仅限于内存。</p>
    </li>
    <li>
        <p>可以通过编程方式使选定的缓存条目无效。</p>
        <p>响应缓存对 HTTP 标头的依赖导致只有几个选项可以使缓存条目失效。</p>
    </li>
    <li>
        <p>资源锁定可降低缓存踩踏和惊群的风险。</p>
        <p>当经常使用的缓存条目被撤销，并且过多的请求尝试同时重新填充同一缓存条目时，会发生缓存踩踏。 惊群类似于：针对缓存条目中尚未存在的相同响应的突发请求。 资源锁定可确保给定响应的所有请求都等待第一个请求填充缓存。 响应缓存没有资源锁定功能。</p>
    </li>
    <li>
        <p>缓存重新验证可最大程度地减少带宽使用。</p>
        <p>缓存重新验证意味着服务器可以返回 <code>304 Not Modified</code> HTTP 状态代码，而不是缓存的响应正文。 此状态代码通知客户端，对请求的响应与之前接收的内容相同。 响应缓存不执行缓存重新验证。</p>
    </li>
</ul>