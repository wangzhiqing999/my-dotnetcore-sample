// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using P0002_MyEtf.DataAccess;

namespace P0002_MyEtf.Migrations
{
    [DbContext(typeof(MyEtfContext))]
    [Migration("20211227051147_MyEtfMacd")]
    partial class MyEtfMacd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("P0002_MyEtf.Model.EtfDayLine", b =>
                {
                    b.Property<string>("EtfCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("etf_code");

                    b.Property<DateTime>("TradingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("trading_date");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("close_price");

                    b.Property<decimal>("HighestPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("highest_price");

                    b.Property<decimal>("LowestPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("lowest_price");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("open_price");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("EtfCode", "TradingDate");

                    b.ToTable("etf_day_line", "my_etf");
                });

            modelBuilder.Entity("P0002_MyEtf.Model.EtfDayMacd", b =>
                {
                    b.Property<string>("EtfCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("etf_code");

                    b.Property<DateTime>("TradingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("trading_date");

                    b.Property<decimal>("Dea")
                        .HasColumnType("numeric")
                        .HasColumnName("dea");

                    b.Property<decimal>("Diff")
                        .HasColumnType("numeric")
                        .HasColumnName("diff");

                    b.Property<decimal>("Macd")
                        .HasColumnType("numeric")
                        .HasColumnName("macd");

                    b.HasKey("EtfCode", "TradingDate");

                    b.ToTable("etf_day_macd", "my_etf");
                });

            modelBuilder.Entity("P0002_MyEtf.Model.EtfDayTr", b =>
                {
                    b.Property<string>("EtfCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("etf_code");

                    b.Property<DateTime>("TradingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("trading_date");

                    b.Property<decimal>("Atr")
                        .HasColumnType("numeric")
                        .HasColumnName("atr");

                    b.Property<decimal>("Tr")
                        .HasColumnType("numeric")
                        .HasColumnName("tr");

                    b.HasKey("EtfCode", "TradingDate");

                    b.ToTable("etf_day_tr", "my_etf");
                });

            modelBuilder.Entity("P0002_MyEtf.Model.EtfMaster", b =>
                {
                    b.Property<string>("EtfCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("etf_code");

                    b.Property<string>("EtfName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("etf_name");

                    b.HasKey("EtfCode");

                    b.ToTable("etf_master", "my_etf");
                });

            modelBuilder.Entity("P0002_MyEtf.Model.EtfWeekLine", b =>
                {
                    b.Property<string>("EtfCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("etf_code");

                    b.Property<DateTime>("TradingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("trading_date");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("close_price");

                    b.Property<decimal>("HighestPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("highest_price");

                    b.Property<decimal>("LowestPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("lowest_price");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("open_price");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint")
                        .HasColumnName("volume");

                    b.HasKey("EtfCode", "TradingDate");

                    b.ToTable("etf_week_line", "my_etf");
                });

            modelBuilder.Entity("P0002_MyEtf.Model.EtfWeekMacd", b =>
                {
                    b.Property<string>("EtfCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("etf_code");

                    b.Property<DateTime>("TradingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("trading_date");

                    b.Property<decimal>("Dea")
                        .HasColumnType("numeric")
                        .HasColumnName("dea");

                    b.Property<decimal>("Diff")
                        .HasColumnType("numeric")
                        .HasColumnName("diff");

                    b.Property<decimal>("Macd")
                        .HasColumnType("numeric")
                        .HasColumnName("macd");

                    b.HasKey("EtfCode", "TradingDate");

                    b.ToTable("etf_week_macd", "my_etf");
                });

            modelBuilder.Entity("P0002_MyEtf.Model.EtfDayLine", b =>
                {
                    b.HasOne("P0002_MyEtf.Model.EtfMaster", "EtfMasterData")
                        .WithMany("EtfDayLineList")
                        .HasForeignKey("EtfCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EtfMasterData");
                });

            modelBuilder.Entity("P0002_MyEtf.Model.EtfDayMacd", b =>
                {
                    b.HasOne("P0002_MyEtf.Model.EtfMaster", "EtfMasterData")
                        .WithMany("EtfDayMacdList")
                        .HasForeignKey("EtfCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EtfMasterData");
                });

            modelBuilder.Entity("P0002_MyEtf.Model.EtfDayTr", b =>
                {
                    b.HasOne("P0002_MyEtf.Model.EtfMaster", "EtfMasterData")
                        .WithMany("EtfDayTrList")
                        .HasForeignKey("EtfCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EtfMasterData");
                });

            modelBuilder.Entity("P0002_MyEtf.Model.EtfWeekLine", b =>
                {
                    b.HasOne("P0002_MyEtf.Model.EtfMaster", "EtfMasterData")
                        .WithMany("EtfWeekLineList")
                        .HasForeignKey("EtfCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EtfMasterData");
                });

            modelBuilder.Entity("P0002_MyEtf.Model.EtfWeekMacd", b =>
                {
                    b.HasOne("P0002_MyEtf.Model.EtfMaster", "EtfMasterData")
                        .WithMany("EtfWeekMacdList")
                        .HasForeignKey("EtfCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EtfMasterData");
                });

            modelBuilder.Entity("P0002_MyEtf.Model.EtfMaster", b =>
                {
                    b.Navigation("EtfDayLineList");

                    b.Navigation("EtfDayMacdList");

                    b.Navigation("EtfDayTrList");

                    b.Navigation("EtfWeekLineList");

                    b.Navigation("EtfWeekMacdList");
                });
#pragma warning restore 612, 618
        }
    }
}
