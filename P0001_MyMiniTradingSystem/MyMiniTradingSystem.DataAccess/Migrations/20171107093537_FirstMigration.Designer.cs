// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MyMiniTradingSystem.DataAccess;
using System;

namespace MyMiniTradingSystem.DataAccess.Migrations
{
    [DbContext(typeof(MyMiniTradingSystemContext))]
    [Migration("20171107093537_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("MyMiniTradingSystem.Model.CommodityPrice", b =>
                {
                    b.Property<string>("CommodityCode")
                        .HasColumnName("commodity_code")
                        .HasMaxLength(32);

                    b.Property<DateTime>("TradingStartDate")
                        .HasColumnName("trading_start_date");

                    b.Property<decimal>("Atr")
                        .HasColumnName("atr")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnName("close_price")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal>("HighestPrice")
                        .HasColumnName("highest_price")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal>("LowestPrice")
                        .HasColumnName("lowest_price")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnName("open_price")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal>("Tr")
                        .HasColumnName("tr")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<DateTime>("TradingFinishDate")
                        .HasColumnName("trading_finish_date");

                    b.Property<long>("Volume")
                        .HasColumnName("volume");

                    b.HasKey("CommodityCode", "TradingStartDate");

                    b.ToTable("mts_commodity_price");
                });

            modelBuilder.Entity("MyMiniTradingSystem.Model.DailySummary", b =>
                {
                    b.Property<long>("DailySummaryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("daily_summary_id");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnName("close_price")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<DateTime>("DailySummaryDate")
                        .HasColumnName("daily_summary_date");

                    b.Property<string>("PositionCommodityCode")
                        .IsRequired()
                        .HasColumnName("position_commodity_code")
                        .HasMaxLength(32);

                    b.Property<int>("PositionQuantity")
                        .HasColumnName("position_quantity");

                    b.Property<decimal>("PositionValue")
                        .HasColumnName("position_value")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal>("StopLossPrice")
                        .HasColumnName("stop_loss_price");

                    b.Property<string>("Todo")
                        .HasColumnName("todo")
                        .HasMaxLength(64);

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnName("user_code")
                        .HasMaxLength(32);

                    b.HasKey("DailySummaryID");

                    b.HasIndex("PositionCommodityCode");

                    b.HasIndex("UserCode");

                    b.ToTable("mts_daily_summary");
                });

            modelBuilder.Entity("MyMiniTradingSystem.Model.Position", b =>
                {
                    b.Property<long>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("position_id");

                    b.Property<string>("CommodityCode")
                        .IsRequired()
                        .HasColumnName("commodity_code")
                        .HasMaxLength(32);

                    b.Property<bool>("IsLong")
                        .HasColumnName("is_long");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnName("user_code")
                        .HasMaxLength(32);

                    b.HasKey("PositionID");

                    b.HasIndex("CommodityCode");

                    b.HasIndex("UserCode");

                    b.ToTable("mts_position");
                });

            modelBuilder.Entity("MyMiniTradingSystem.Model.TradableCommodity", b =>
                {
                    b.Property<string>("CommodityCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("commodity_code")
                        .HasMaxLength(32);

                    b.Property<string>("CommodityName")
                        .IsRequired()
                        .HasColumnName("commodity_name")
                        .HasMaxLength(32);

                    b.Property<int>("DepositRatio")
                        .HasColumnName("deposit_ratio");

                    b.Property<int>("NumOfOneHand")
                        .HasColumnName("num_of_one_hand");

                    b.HasKey("CommodityCode");

                    b.ToTable("mts_commodity");
                });

            modelBuilder.Entity("MyMiniTradingSystem.Model.UserAccount", b =>
                {
                    b.Property<string>("UserCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_code")
                        .HasMaxLength(32);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasMaxLength(32);

                    b.HasKey("UserCode");

                    b.ToTable("mts_user_account");
                });

            modelBuilder.Entity("MyMiniTradingSystem.Model.CommodityPrice", b =>
                {
                    b.HasOne("MyMiniTradingSystem.Model.TradableCommodity", "TradableCommodityData")
                        .WithMany("CommodityPrices")
                        .HasForeignKey("CommodityCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyMiniTradingSystem.Model.DailySummary", b =>
                {
                    b.HasOne("MyMiniTradingSystem.Model.TradableCommodity", "PositionTradableCommodity")
                        .WithMany("DailySummarys")
                        .HasForeignKey("PositionCommodityCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyMiniTradingSystem.Model.UserAccount", "UserAccountData")
                        .WithMany("DailySummarys")
                        .HasForeignKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyMiniTradingSystem.Model.Position", b =>
                {
                    b.HasOne("MyMiniTradingSystem.Model.TradableCommodity", "TradableCommodityData")
                        .WithMany("Positions")
                        .HasForeignKey("CommodityCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyMiniTradingSystem.Model.UserAccount", "UserAccountData")
                        .WithMany("Positions")
                        .HasForeignKey("UserCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
